import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
cols=['ID', 'Entity', 'Sentiment', 'Text']
train = pd.read_csv(r"C:\Users\HP\Documents\Datasets\twitter_training.csv", names= cols)
cols2= ['ID', 'Entity', 'Sentiment', 'Text']
train2 = pd.read_csv(r"C:\Users\HP\Documents\Datasets\twitter_validation.csv", names= cols2)
print(train,train2)
print(train.info(),train2.info())
train.describe(include=['int','float','object'])
train2.describe(include=['int','float','object'])

train.isnull().sum()
train.dropna(axis= 0, inplace= True)
train.isnull().sum()
train.duplicated().sum()
train.drop_duplicates(inplace=True)
train.duplicated().sum()

train2.isnull().sum()
train2.duplicated().sum()

plt.figure(figsize= (10,8))
train['Entity'].value_counts().plot(kind='barh', color= 'orange')
plt.title('Count Visualization of different topics')
plt.xlabel("Count")
plt.show()

plt.figure(figsize= (10,8))
train2['Entity'].value_counts().plot(kind='barh', color= 'green')
plt.title('Count Visualization of different topics')
plt.xlabel("Count")
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sns.countplot(x = 'Sentiment', data= train, palette= 'rocket', ax= ax[0])
ax[0].set_title('Sentiment Distribution Bar Graph- Train Data')
sns.countplot(x = 'Sentiment', data= train2, palette= 'mako', ax= ax[1])
ax[1].set_title('Sentiment Distribution Bar Graph- Train2 Data')
plt.show()
plt.tight_layout()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sentiment_counts = train['Sentiment'].value_counts()
ax[0].pie(sentiment_counts, labels=sentiment_counts.index, autopct="%1.1f%%", startangle=140, colors=['skyblue', 'orange', 'green', 'purple'])
ax[0].set_title('Sentiment Distribution Pie Chart- Train')
sentiment_counts2 = train2['Sentiment'].value_counts()
ax[1].pie(sentiment_counts2, labels=sentiment_counts2.index, autopct="%1.1f%%", startangle=140, colors= sns.color_palette("pastel"))
ax[1].set_title('Sentiment Distribution Pie Chart- Train2')
plt.show()

plt.figure(figsize=(20,12))
plt.title('Sentiment Distribution Topic-wise- Train Data')
sns.countplot(x='Entity', data= train, palette= 'flare', hue= 'Sentiment')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(20,12))
plt.title('Sentiment Distribution Topic-wise- Train2 Data')
sns.countplot(x='Entity', data= train2, palette= 'crest', hue= 'Sentiment')
plt.xticks(rotation=90)
plt.show()

topic_wise_sentiment = train.groupby(["Entity", "Sentiment"]).size().reset_index(name='Count')
topic_counts = train['Entity'].value_counts().nlargest(5).index
top_topics_sentiment = topic_wise_sentiment[topic_wise_sentiment['Entity'].isin(topic_counts)]

topic_wise_sentiment2 = train2.groupby(["Entity", "Sentiment"]).size().reset_index(name='Count')
topic_counts2 = train2['Entity'].value_counts().nlargest(5).index
top_topics_sentiment2 = topic_wise_sentiment2[topic_wise_sentiment2['Entity'].isin(topic_counts2)]

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sns.barplot(data=top_topics_sentiment[top_topics_sentiment['Sentiment'] == 'Negative'], x='Entity', y='Count', palette='magma', ax= ax[0])
ax[0].set_title('Top 5 Topics with Negative Sentiments- Train')
ax[0].set_xlabel('Entity')
ax[0].set_ylabel('Count')
ax[0].tick_params(axis='x', labelrotation=45)
sns.barplot(data=top_topics_sentiment2[top_topics_sentiment2['Sentiment'] == 'Negative'], x='Entity', y='Count', palette='viridis', ax= ax[1])
ax[1].set_title('Top 5 Topics with Negative Sentiments- Train2')
ax[1].set_xlabel('Entity')
ax[1].set_ylabel('Count')
ax[1].tick_params(axis='x', labelrotation=45)
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sns.barplot(data=top_topics_sentiment[top_topics_sentiment['Sentiment'] == 'Positive'], x='Entity', y='Count', palette='rocket_r', ax= ax[0])
ax[0].set_title('Top 5 Topics with Positive Sentiments- Train Data')
ax[0].set_xlabel('Entity')
ax[0].set_ylabel('Count')
ax[0].tick_params(axis='x', labelrotation=45)
sns.barplot(data=top_topics_sentiment2[top_topics_sentiment2['Sentiment'] == 'Positive'], x='Entity', y='Count', palette='Greens', ax= ax[1])
ax[1].set_title('Top 5 Topics with Positive Sentiments- Train2 Data')
ax[1].set_xlabel('Entity')
ax[1].set_ylabel('Count')
ax[1].tick_params(axis='x', labelrotation=45)
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sns.barplot(data=top_topics_sentiment[top_topics_sentiment['Sentiment'] == 'Neutral'], x='Entity', y='Count', palette='deep', ax= ax[0])
ax[0].set_title('Top 5 Topics with Neutral Sentiments- Train Data')
ax[0].set_xlabel('Entity')
ax[0].set_ylabel('Count')
ax[0].tick_params(axis='x', labelrotation=45)
sns.barplot(data=top_topics_sentiment2[top_topics_sentiment2['Sentiment'] == 'Neutral'], x='Entity', y='Count', palette='muted', ax= ax[1])
ax[1].set_title('Top 5 Topics with Neutral Sentiments- Train2 Data')
ax[1].set_xlabel('Entity')
ax[1].set_ylabel('Count')
ax[1].tick_params(axis='x', labelrotation=45)
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
sns.barplot(data=top_topics_sentiment[top_topics_sentiment['Sentiment'] == 'Irrelevant'], x='Entity', y='Count', palette='bright', ax= ax[0])
ax[0].set_title('Top 5 Topics with Irrelevant Sentiments- Train Data')
ax[0].set_xlabel('Entity')
ax[0].set_ylabel('Count')
ax[0].tick_params(axis='x', labelrotation=45)
sns.barplot(data=top_topics_sentiment2[top_topics_sentiment2['Sentiment'] == 'Irrelevant'], x='Entity', y='Count', palette='colorblind', ax= ax[1])
ax[1].set_title('Top 5 Topics with Irrelevant Sentiments- Train2 Data')
ax[1].set_xlabel('Entity')
ax[1].set_ylabel('Count')
ax[1].tick_params(axis='x', labelrotation=45)
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
google_data = train[train['Entity'] == 'Google']
sentiment_counts = google_data['Sentiment'].value_counts()
ax[0].pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140, colors= sns.color_palette("dark"))
ax[0].set_title('Sentiment Distribution of Topic "Google"- Train')
google_data2 = train2[train2['Entity'] == 'Google']
sentiment_counts2 = google_data2['Sentiment'].value_counts()
ax[1].pie(sentiment_counts2, labels=sentiment_counts2.index, autopct='%1.1f%%', startangle=140)
ax[1].set_title('Sentiment Distribution of Entity "Google"- Train2')
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(15, 5))
ms_data = train[train['Entity'] == 'Microsoft']
sentiment_counts = ms_data['Sentiment'].value_counts()
ax[0].pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140)
ax[0].set_title('Sentiment Distribution of Topic "Microsoft"- Train')
ms_data2 = train2[train2['Entity'] == 'Microsoft']
sentiment_counts2 = ms_data2['Sentiment'].value_counts()
ax[1].pie(sentiment_counts2, labels=sentiment_counts2.index, autopct='%1.1f%%', startangle=140)
ax[1].set_title('Sentiment Distribution of Topic "Microsoft"- Train2')
plt.show()

train['msg_len'] = train['Text'].apply(len)
train
train2['msg_len'] = train2['Text'].apply(len)
train2
fig, ax = plt.subplots(1, 2, figsize= (15,8))
sns.histplot(train['msg_len'], bins= 25, kde= True, ax= ax[0])
ax[0].set_title('Message Length Distribution in Training Data')
ax[0].set_ylabel('Frequency')
ax[0].set_xlabel('Message Length')
sns.histplot(train2['msg_len'], bins= 25, kde= True, ax= ax[1])
ax[1].set_title('Message Length Distribution in Training2 Data')
ax[1].set_ylabel('Frequency')
ax[1].set_xlabel('Message Length')
plt.show()

fig, ax = plt.subplots(1, 2, figsize= (15,8))
sns.boxplot(data=train, x=train['Sentiment'], y='msg_len', palette='viridis', order=['Positive', 'Negative', 'Neutral', 'Irrelevant'], ax= ax[0])
ax[0].set_title('Message Length Distribution by Sentiment in Training Data')
ax[0].set_ylabel('Message Length')
ax[0].set_xlabel('Sentiment')
ax[0].set_ylim(0,300)
sns.boxplot(data=train2, x=train2['Sentiment'], y='msg_len', palette='viridis', order=['Positive', 'Negative', 'Neutral', 'Irrelevant'], ax= ax[1])
ax[1].set_title('Message Length Distribution by Sentiment in Training2 Data')
ax[1].set_ylabel('Message Length')
ax[1].set_xlabel('Sentiment')
ax[1].set_ylim(0,300)
plt.show()

crosstab = pd.crosstab(index=train['Entity'], columns=train['Sentiment'])
plt.figure(figsize=(12, 8))  
sns.heatmap(crosstab, cmap='coolwarm', annot=True, fmt='d', linewidths=.5)
plt.title('Heatmap of Entity vs Sentiment of Train Data')
plt.xlabel('Sentiment')
plt.ylabel('Entity')
plt.show()
crosstab = pd.crosstab(index=train2['Entity'], columns=train2['Sentiment'])
plt.figure(figsize=(12, 8))  
sns.heatmap(crosstab, cmap='cubehelix', annot=True, fmt='d', linewidths=.5)
plt.title('Heatmap of Entity vs Sentiment of Train2 Data')
plt.xlabel('Sentiment')
plt.ylabel('Entity')
plt.show()
